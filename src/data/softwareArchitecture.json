{
  "label": "Software Architecture",
  "link": "Clean architecture (book)",
  "cards": [
    {
      "id": 1,
      "question": "У чому є обмеження структурного програмування?",
      "answer": "Структурне програмування накладає обмеження на пряму передачу управління."
    },
    {
      "id": 2,
      "question": "У чому є обмеження об'єктно-орієнтованого програмування?",
      "answer": "Об'єктно-орієнтоване програмування накладає обмеження на непряму передачу управління."
    },
    {
      "id": 3,
      "question": "У чому є обмеження функціонального програмування?",
      "answer": "Функціональне програмування накладає обмеження на присвоювання."
    },
    {
      "id": 4,
      "question": "У чому полягає сенс SRP?",
      "answer": "Мати лише одну причину для зміни в рамках модуля, тобто розділяти код від якого залежать різні actors."
    },
    {
      "id": 5,
      "question": "У чому полягає сенс OCP?",
      "answer": "Сутності відкриті для розширення та закриті для змін. Єдиний напрям потіку даних."
    },
    {
      "id": 6,
      "question": "У чому полягає сенс LSP?",
      "answer": "Система повинна передбачати сумісність (замінність) модулів."
    },
    {
      "id": 7,
      "question": "У чому полягає сенс ISP?",
      "answer": "Залежності, які несуть зайвий тягар непотрібних і невикористаних особливостей, можуть спричинити несподівані проблеми."
    },
    {
      "id": 8,
      "question": "У чому полягає сенс DIP?",
      "answer": "Треба уникати залежностей від конкретних реалізацій, використовуючи абстрактні класи, фабрики та інтерфейси."
    }
  ]
}