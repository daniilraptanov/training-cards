{
  "label": "Software Architecture",
  "link": "Clean architecture (book)",
  "cards": [
    {
      "id": 1,
      "question": "У чому є обмеження структурного програмування?",
      "answer": "Структурне програмування накладає обмеження на пряму передачу управління."
    },
    {
      "id": 2,
      "question": "У чому є обмеження об'єктно-орієнтованого програмування?",
      "answer": "Об'єктно-орієнтоване програмування накладає обмеження на непряму передачу управління."
    },
    {
      "id": 3,
      "question": "У чому є обмеження функціонального програмування?",
      "answer": "Функціональне програмування накладає обмеження на присвоювання."
    },
    {
      "id": 4,
      "question": "У чому полягає сенс SRP?",
      "answer": "Мати лише одну причину для зміни в рамках модуля, тобто розділяти код від якого залежать різні actors."
    },
    {
      "id": 5,
      "question": "У чому полягає сенс OCP?",
      "answer": "Сутності відкриті для розширення та закриті для змін. Єдиний напрям потіку даних."
    },
    {
      "id": 6,
      "question": "У чому полягає сенс LSP?",
      "answer": "Система повинна передбачати сумісність (замінність) модулів."
    },
    {
      "id": 7,
      "question": "У чому полягає сенс ISP?",
      "answer": "Залежності, які несуть зайвий тягар непотрібних і невикористаних особливостей, можуть спричинити несподівані проблеми."
    },
    {
      "id": 8,
      "question": "У чому полягає сенс DIP?",
      "answer": "Треба уникати залежностей від конкретних реалізацій, використовуючи абстрактні класи, фабрики та інтерфейси."
    },
    {
      "id": 9,
      "question": "Якою повинна бути архітектура ПЗ? (бізнес та реалізація)",
      "answer": "Бізнес-правила - найважливіші елементи, а деталі реалізації - безвідносні щодо цих правил."
    },
    {
      "id": 10,
      "question": "Яка мета архітектора ПЗ? (про деталі реалізації)",
      "answer": "Мати можливість відкладати і затримувати прийняття рішень щодо деталей."
    },
    {
      "id": 11,
      "question": "Що є справжнім дублюванням коду?",
      "answer": "Будь-яка зміна потребує такої самої зміни в усіх інших копіях. Код розвивається одним шляхом."
    },
    {
      "id": 12,
      "question": "Що саме краще відкладати для вибору при проектуванні системи?",
      "answer": "Фреймворки, бази даних, бібліотеки тощо."
    },
    {
      "id": 13,
      "question": "Між якими модулями треба проводити межу?",
      "answer": "Між бізнес-логікою та технічними рішеннями. Між правилами та базою даних."
    },
    {
      "id": 14,
      "question": "Які відношення між базою даних та бізнес-логікою?",
      "answer": "База має знати про бізнес, бізнес не має знати про базу."
    },
    {
      "id": 15,
      "question": "Які частини системи неважливі, на відміну від бізнес-правил?",
      "answer": "Введення/виведення даних."
    },
    {
      "id": 16,
      "question": "Як проводити межу між модулями? Чому саме так?",
      "answer": "По осях змін. Бо компоненти по обох боках змінюються з різною швидкістю та з різних причин."
    },
    {
      "id": 17,
      "question": "Як слід проводити стрілки залежностей між модулями?",
      "answer": "Від низькорівневих деталей в бік високорівневих абстракцій."
    }
  ]
}